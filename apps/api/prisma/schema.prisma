generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model MicroMixReport {
  id                     String       @id @default(cuid())
  formNumber             String       @unique
  reportNumber           String?      @unique
  prefix                 String       @default("M")
  client                 String?
  dateSent               DateTime?
  typeOfTest             String?
  sampleType             String?
  formulaNo              String?
  description            String?
  lotNo                  String?
  manufactureDate        DateTime?
  testSopNo              String?
  dateTested             DateTime?
  preliminaryResults     String?
  preliminaryResultsDate DateTime?
  dateCompleted          DateTime?
  tbc_dilution           String?
  tbc_gram               String?
  tbc_result             String?
  tbc_spec               String?
  tmy_dilution           String?
  tmy_gram               String?
  tmy_result             String?
  tmy_spec               String?
  pathogens              Json?
  comments               String?
  testedBy               String?
  testedDate             DateTime?
  reviewedBy             String?
  reviewedDate           DateTime?
  status                 ReportStatus @default(DRAFT)
  lockedAt               DateTime?
  createdBy              String?
  updatedBy              String?
  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @updatedAt
  corrections            Json?
  attachments            Attachment[]
}

model Sample {
  id         String   @id @default(cuid())
  clientId   String
  sampleCode String   @unique
  sampleType String
  receivedAt DateTime @default(now())
  status     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String?
  role         UserRole @default(CLIENT)
  passwordHash String

  // client
  clientCode String?

  // userId login + lifecycle
  userId            String?   @unique
  userIdSetAt       DateTime?
  passwordUpdatedAt DateTime?
  passwordVersion   Int       @default(1)

  // flag that set it in the first-login flow
  mustChangePassword Boolean @default(false)

  // admin invite / temporary credentials
  inviteToken           String?   @unique
  inviteTokenExpiresAt  DateTime?
  tempPasswordExpiresAt DateTime?

  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ðŸ‘‡ relation: one user can have many balance readings
  readings    BalanceReading[]
  // ðŸ‘‡ relation: one user can have many audit trails
  auditTrails AuditTrail[]
}

model ClientSequence {
  clientCode String @id
  lastNumber Int    @default(0)
}

model LabReportSequence {
  department String @id
  lastNumber Int    @default(0)
}

model BalanceReading {
  id         String   @id @default(cuid())
  instrument String
  command    String
  result     String
  createdAt  DateTime @default(now())

  // foreign key
  userId String?
  user   User?   @relation(fields: [userId], references: [id])
}

model AuditTrail {
  id        String    @id @default(cuid())
  action    String
  entity    String
  entityId  String?
  changes   Json?
  details   String
  role      UserRole?
  ipAddress String?
  createdAt DateTime  @default(now())

  // foreign key
  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  @@index([entity, entityId, createdAt])
  @@index([userId, createdAt])
}

enum ReportStatus {
  // ----- Client -----
  DRAFT
  SUBMITTED_BY_CLIENT // old (keep for backward compat if needed)
  CLIENT_NEEDS_PRELIMINARY_CORRECTION // new
  CLIENT_NEEDS_FINAL_CORRECTION // new
  UNDER_CLIENT_PRELIMINARY_CORRECTION // new
  UNDER_CLIENT_FINAL_CORRECTION // new
  PRELIMINARY_RESUBMISSION_BY_CLIENT // new
  FINAL_RESUBMISSION_BY_CLIENT // new
  UNDER_CLIENT_PRELIMINARY_REVIEW // new
  UNDER_CLIENT_FINAL_REVIEW // new

  // ----- Frontdesk (optional branch) -----
  RECEIVED_BY_FRONTDESK
  FRONTDESK_ON_HOLD
  FRONTDESK_NEEDS_CORRECTION

  // ----- Preliminary Testing (Micro round 1) -----
  UNDER_PRELIMINARY_TESTING_REVIEW // new
  PRELIMINARY_TESTING_ON_HOLD // new
  PRELIMINARY_TESTING_NEEDS_CORRECTION // new
  PRELIMINARY_RESUBMISSION_BY_TESTING // new
  UNDER_PRELIMINARY_RESUBMISSION_TESTING_REVIEW // new
  PRELIMINARY_APPROVED // new

  // ----- Final Testing (Micro round 2) -----
  UNDER_FINAL_TESTING_REVIEW // new
  FINAL_TESTING_ON_HOLD // new
  FINAL_TESTING_NEEDS_CORRECTION // new
  FINAL_RESUBMISSION_BY_TESTING // new
  UNDER_FINAL_RESUBMISSION_TESTING_REVIEW // new

  // ----- QA -----
  UNDER_QA_REVIEW
  QA_NEEDS_CORRECTION

  // ----- Admin -----
  UNDER_ADMIN_REVIEW
  ADMIN_NEEDS_CORRECTION
  ADMIN_REJECTED
  UNDER_FINAL_RESUBMISSION_ADMIN_REVIEW // new

  // ----- Final -----
  FINAL_APPROVED // new
  LOCKED
}

enum UserRole {
  SYSTEMADMIN
  ADMIN
  FRONTDESK
  MICRO
  CHEMISTRY
  QA
  CLIENT
}


model Attachment {
  id         String   @id @default(cuid())
  reportId   String
  kind       AttachmentKind
  filename   String
  storageKey String
  checksum   String
  pages      Int?
  source     String      // "scan-smb" | "scan-email" | "manual"
  meta       Json?
  createdAt  DateTime  @default(now())
  createdBy  String?     // user id or "ingestor"

  MicroMixReport     MicroMixReport    @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@index([reportId])
  @@unique([reportId, checksum])
}

enum AttachmentKind {
  SIGNED_FORM
  RAW_SCAN
  OTHER
}